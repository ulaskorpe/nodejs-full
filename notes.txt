"Kod akışının sırayla işlemediği, işlemlerin birbirini beklemediği, kod akışının işlem durumlarına göre devam ettiği programlamaya Asenkron Programlama denir."


nodemon :  runs script auto stop/start on any change
npm i nodemon@2.0.19 --save-dev   // runs as develops
npx - is a script runs
npx nodemon

in , package.json 
under scripts add "start" : "npx nodemon {index.app}" -> npm start 

middleware  : iki yazılım arası durma devam ! next() 

en özel route en tepede olmalı 

statik dosyalar: 

app.use(express.static("node_modules"));    /// node_modules klasörü artık erişime açık , referans başlangıç noktası olarak 
    <link rel="stylesheet" href="/bootstrap/dist/css/bootstrap.min.css">

app.use("/libs",express.static("node_modules")); /// /libs alias olarak tanımladık

npm i bootstrap@5.3.2    ile bootstrap ı package.json dependencies e ekledik 

 nav.navbar.navbar-dark.bg-primary.navbar-expand-lg [tab]

template engine - pug / ejs 

npm i ejs @ version

app.set("view engine","ejs");

//console.log(app.get("view engine"));

.html>>.ejs

res.senFile >> res.render   ,    res.render("users/index");  yeterli arayacğı yer zatn views dir

///settings.json

If snippets do not show up, add the following to your settings file

    "emmet.includeLanguages": {
        "ejs": "html",
    },


     <%- include('../partials/nav') %>

         <%- include('../partials/blog-card',( blog ,data2 ,data3 .. ) ) %>   /// in loops send obj to partial and use it as vars in partial 
npm i mysql2@2.3.3

///// nesne üzerinde filter 
  <% if (blogs.filter(b=>b.home).length >1) { %>
              
                      <%- include('../partials/pagination') %>
                        
                     
                    <% } %>

sequelize :::
User.sync() - This creates the table if it doesn't exist (and does nothing if it already exists)
User.sync({ force: true }) - This creates the table, dropping it first if it already existed
User.sync({ alter: true }) - This checks what is the current state of the table in the database (which columns it has, what are their data types, etc), and then performs the necessary changes in the table to make it match the model.

    <!--   <% for( let index = 0; index < categories.length; index++ ) { %>
           <a href="" class="list-group-item list-group-item-action  "><%=categories[index] %></a>
       <% } %>-->


    await Blog.update({pre:"this is a new prologue for every blog"},{where : {
      id: {[Op.lt]:200}

     }});


     many-to-many 
     const Movie = sequelize.define('Movie', { name: DataTypes.STRING });
const Actor = sequelize.define('Actor', { name: DataTypes.STRING });
Movie.belongsToMany(Actor, { through: 'ActorMovies' });
Actor.belongsToMany(Movie, { through: 'ActorMovies' });


Instead of a string, passing a model directly is also supported, and in that case the given model will be used as the junction model (and no model will be created automatically). For example:

const Movie = sequelize.define('Movie', { name: DataTypes.STRING });
const Actor = sequelize.define('Actor', { name: DataTypes.STRING });
const ActorMovies = sequelize.define('ActorMovies', {
  MovieId: {
    type: DataTypes.INTEGER,
    references: {
      model: Movie, // 'Movies' would also work
      key: 'id'
    }
  },
  ActorId: {
    type: DataTypes.INTEGER,
    references: {
      model: Actor, // 'Actors' would also work
      key: 'id'
    }
  }
});
Movie.belongsToMany(Actor, { through: ActorMovies });
Actor.belongsToMany(Movie, { through: ActorMovies });



slugify('some string', {
  replacement: '-',  // replace spaces with replacement character, defaults to `-`
  remove: undefined, // remove characters that match regex, defaults to `undefined`
  lower: false,      // convert to lower case, defaults to `false`
  strict: false,     // strip special characters except replacement, defaults to `false`
  locale: 'vi',      // language code of the locale to use
  trim: true         // trim leading and trailing replacement chars, defaults to `true`
})


////group by
 const blogs = await Blog.findAll(
        { attributes: ["id","title","pre","image"],
           order:[['id','DESC']],
           where:{verified:true},
            
           group: ["blogs.id"],
           
           include:  
            {
              model: Category,
              attributes: [],
              through: { attributes: [] }, // Exclude any through table attributes
            },  
            raw:true
    });


    hash kütüphanesi :    npm i bcrypt
    https://www.npmjs.com/package/bcrypt
    

    cookie kütüphanesi
    https://www.npmjs.com/package/cookie-parser

    session kütüphanesi
    https://www.npmjs.com/package/express-session


    session-db package
    https://www.npmjs.com/package/connect-session-sequelize


    csrf : 
CSRF stands for Cross-Site Request Forgery. a unique token must be generated by server , and must be requested every post 
https://www.npmjs.com/package/csurf

csrf token is invalid on forms include file , you must write it in action part
email sending is via nodemailer

hooks : executed on model itself  , 
https://sequelize.org/docs/v6/other-topics/hooks/


https://joi.dev/api/?v=17.9.1   
package for validation


jws token : https://jwt.io/
npm install jsonwebtoken


errors can be catch by try-catch blocks (all functions must be try-catch used) or using express-async-errors package

 npm install express-async-errors

 for logging error use winston package
 https://www.npmjs.com/package/winston
 to use mongodb with winston , package winston-mongodb is required


 to use config files config package must be installed
 npm install config